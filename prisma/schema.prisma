generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EntityStatus {
  NEW
  ACTIVE
  INACTIVE
  BLOCKED
  DELETED
}

enum NotificationType {
  ORDER
  PROMOTION
  SYSTEM
}

enum OrderType {
  DELIVERY
  PICKUP
  TABLE
}

enum PaiementMode {
  MOBILE_MONEY
  CREDIT_CARD
  CASH
}

enum PaiementMobileMoneyType {
  ORANGE
  MTN
  MOOV
}

enum PaiementStatus {
  PENDING
  SUCCESS
  FAILED
}

enum SupplementCategory {
  FOOD
  DRINK
  ACCESSORY
}

enum UserType {
  BACKOFFICE
  RESTAURANT
}

enum UserRole {
  ADMIN
  MANAGER
}

model Address {
  id String @id @default(uuid()) @db.Uuid

  title       String    @db.VarChar
  address     String    @db.VarChar
  street      String?   @db.VarChar
  city        String?   @db.VarChar
  longitude   Float
  latitude    Float
  customer_id String?   @db.Uuid
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  orders      Order[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model Category {
  id String @id @default(uuid()) @db.Uuid

  name        String  @db.VarChar
  description String? @db.VarChar
  image       String? @db.VarChar
  dishes      Dish[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model CounterOtp {
  id      String @id @default(uuid()) @db.Uuid
  counter Int
}

model Customer {
  id String @id @default(uuid()) @db.Uuid

  phone                 String               @unique @db.VarChar
  first_name            String?              @db.VarChar(255)
  last_name             String?              @db.VarChar(255)
  birth_day             DateTime?            @db.Date
  email                 String?              @unique @db.VarChar
  image                 String?              @db.VarChar
  addresses             Address[]
  favorites             Favorite[]
  notification_settings NotificationSetting?

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model DishRestaurant {
  id            String     @id @default(uuid()) @db.Uuid
  dish_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  dish          Dish       @relation(fields: [dish_id], references: [id], onDelete: Cascade)
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
}

model DishSupplement {
  id            String     @id @default(uuid()) @db.Uuid
  dish_id       String     @db.Uuid
  supplement_id String     @db.Uuid
  dish          Dish       @relation(fields: [dish_id], references: [id], onDelete: Cascade)
  supplement    Supplement @relation(fields: [supplement_id], references: [id], onDelete: Cascade)
}

model Dish {
  id String @id @default(uuid()) @db.Uuid

  name                 String             @db.VarChar
  description          String?            @db.VarChar
  price                Float
  image                String?            @db.VarChar
  available            Boolean            @default(true)
  is_new               Boolean            @default(false)
  is_promotion         Boolean            @default(false)
  promotion_price      Float?
  category_id          String             @db.Uuid
  category             Category           @relation(fields: [category_id], references: [id], onDelete: Cascade)
  dish_restaurants     DishRestaurant[]
  dish_supplements     DishSupplement[]
  favorites            Favorite[]
  order_items          OrderItem[]
  special_offer_dishes SpecialOfferDish[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([category_id, available])
}

model Favorite {
  id String @id @default(uuid()) @db.Uuid

  customer_id String   @db.Uuid
  dish_id     String   @db.Uuid
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  dish        Dish     @relation(fields: [dish_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model NotificationSetting {
  customer_id        String   @id @db.Uuid
  order_updates      Json
  promotions         Json
  newsletter         Json
  push_notifications Json
  customer           Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model Notification {
  id String @id @default(uuid()) @db.Uuid

  user_id       String           @db.VarChar
  icon          String           @db.VarChar
  icon_bg_color String           @db.VarChar
  title         String           @db.VarChar
  date          DateTime         @db.Date
  time          String           @db.VarChar
  message       String           @db.VarChar
  type          NotificationType
  is_read       Boolean          @default(false)
  show_chevron  Boolean?         @default(true)
  notif_banner  String           @db.VarChar
  notif_title   String           @db.VarChar
  data          Json?

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([user_id])
  @@index([type])
}

model OrderItem {
  id String @id @default(uuid()) @db.Uuid

  quantity    Int    @default(1)
  amount      Float
  order_id    String @db.Uuid
  dish_id     String @db.Uuid
  supplements Json?  @db.Json
  dish        Dish   @relation(fields: [dish_id], references: [id])
  order       Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model Order {
  id String @id @default(uuid()) @db.Uuid

  type         OrderType
  address_id   String      @db.Uuid
  code_promo   String?     @db.VarChar
  delivery_fee Float
  tax          Float
  amount       Float
  net_amount   Float
  date         DateTime?   @db.Date
  time         DateTime?   @db.Time(6)
  fullname     String?     @db.VarChar
  phone        String?     @db.VarChar
  email        String?     @db.VarChar
  note         String?     @db.VarChar
  address      Address     @relation(fields: [address_id], references: [id], onDelete: Cascade)
  order_items  OrderItem[]
  paiements    Paiement[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([address_id])
}

model OtpToken {
  id      String   @id @default(uuid()) @db.Uuid
  code    String   @db.VarChar(255)
  phone   String   @db.VarChar
  counter Int?
  expire  DateTime @db.Timestamp(6)
}

model Paiement {
  id                String                   @id @default(uuid()) @db.Uuid
  amount            Float
  order_id          String                   @db.Uuid
  mode              PaiementMode
  mobile_money_type PaiementMobileMoneyType?
  status            PaiementStatus
  reference         String                   @db.VarChar
  order             Order                    @relation(fields: [order_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model Restaurant {
  id String @id @default(uuid()) @db.Uuid

  name             String           @db.VarChar
  manager          String           @db.Uuid
  description      String?          @db.VarChar
  image            String?          @db.VarChar
  address          String?          @db.VarChar
  latitude         Float?
  longitude        Float?
  phone            String?          @db.VarChar
  email            String?          @db.VarChar
  schedule         Json?            @db.Json
  dish_restaurants DishRestaurant[]
  users            User[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model SpecialOfferDish {
  id               String       @id @default(uuid()) @db.Uuid
  dish_id          String       @db.Uuid
  special_offer_id String       @db.Uuid
  dish             Dish         @relation(fields: [dish_id], references: [id], onDelete: Cascade)
  special_offer    SpecialOffer @relation(fields: [special_offer_id], references: [id], onDelete: Cascade)
}

model SpecialOffer {
  id          String             @id @default(uuid()) @db.Uuid
  name        String             @db.VarChar
  description String?            @db.VarChar
  image       String             @db.VarChar
  tax         Float
  start_date  DateTime           @db.Timestamp(6)
  end_date    DateTime           @db.Timestamp(6)
  dishes      SpecialOfferDish[]
}

model Supplement {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @db.VarChar
  price            Float
  image            String?            @db.VarChar
  available        Boolean            @default(true)
  category         SupplementCategory
  dish_supplements DishSupplement[]
}

model User {
  id String @id @default(uuid()) @db.Uuid

  fullname            String      @db.VarChar
  email               String      @unique @db.VarChar
  phone               String?     @db.VarChar
  password            String      @db.VarChar
  image               String?     @db.VarChar
  address             String?     @db.VarChar
  password_is_updated Boolean     @default(false)
  type                UserType
  role                UserRole
  restaurant_id       String?     @db.Uuid
  restaurant          Restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([email, type])
}
