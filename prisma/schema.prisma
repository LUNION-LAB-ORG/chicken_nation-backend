generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EntityStatus {
  NEW
  ACTIVE
  INACTIVE
  BLOCKED
  DELETED
}

enum NotificationType {
  ORDER
  PROMOTION
  SYSTEM
}

enum OrderType {
  DELIVERY
  PICKUP
  TABLE
}

enum OrderStatus {
  PENDING // EN ATTENTE
  CANCELLED // ANNULÉ
  ACCEPTED // ACCEPTÉ
  IN_PROGRESS // EN COURS
  READY // PRÊT
  PICKED_UP // EN LIVRAISON
  DELIVERED // LIVRÉ
  COLLECTED // COLLECTÉ PAR LE CLIENT
  COMPLETED // TERMINÉ, LE LIVREUR A L'ARGENT
}

enum PaiementMode {
  MOBILE_MONEY
  WALLET
  CREDIT_CARD
  CASH
}

enum PaiementStatus {
  REVERTED
  SUCCESS
  FAILED
}

enum SupplementCategory {
  FOOD
  DRINK
  ACCESSORY
}

enum UserType {
  BACKOFFICE
  RESTAURANT
}

enum UserRole {
  ADMIN
  MARKETING
  COMPTABLE
  MANAGER
  CAISSIER
  CALL_CENTER
  CUISINE
}

enum TypeTable {
  TABLE_SQUARE
  TABLE_RECTANGLE
  TABLE_ROUND
}

enum LoyaltyLevel {
  STANDARD
  PREMIUM
  GOLD
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
}

enum TargetType {
  ALL_PRODUCTS
  SPECIFIC_PRODUCTS
  CATEGORIES
}

enum PromotionStatus {
  DRAFT
  ACTIVE
  EXPIRED
  PAUSED
  CANCELLED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum LoyaltyPointType {
  EARNED // Points gagnés
  REDEEMED // Points utilisés
  EXPIRED // Points expirés
  BONUS // Points bonus
}

enum LoyaltyPointIsUsed {
  YES
  NO
  PARTIAL
}

model Address {
  id String @id @default(uuid()) @db.Uuid

  title       String    @db.VarChar
  address     String    @db.VarChar
  street      String?   @db.VarChar
  city        String?   @db.VarChar
  longitude   Float
  latitude    Float
  customer_id String?   @db.Uuid
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model Category {
  id String @id @default(uuid()) @db.Uuid

  name        String  @db.VarChar
  description String? @db.VarChar
  image       String? @db.Text
  dishes      Dish[]

  entity_status                 EntityStatus                @default(NEW)
  created_at                    DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                    DateTime                    @default(now()) @db.Timestamp(6)
  promotion_targeted_categories PromotionTargetedCategory[]
}

model CounterOtp {
  id      String @id @default(uuid()) @db.Uuid
  counter Int
}

model Customer {
  id String @id @default(uuid()) @db.Uuid

  phone                 String               @unique @db.VarChar
  first_name            String?              @db.VarChar(255)
  last_name             String?              @db.VarChar(255)
  birth_day             DateTime?            @db.Date
  email                 String?              @unique @db.VarChar
  image                 String?              @db.Text
  addresses             Address[]
  favorites             Favorite[]
  orders                Order[]
  notification_settings NotificationSetting?

  // ================================
  // SYSTÈME DE FIDÉLITÉ INTÉGRÉ
  // ================================
  loyalty_level     LoyaltyLevel?
  total_points      Int           @default(0) // Points actuels disponibles
  lifetime_points   Int           @default(0) // Total des points gagnés depuis l'inscription
  last_level_update DateTime?     @db.Timestamp(6)

  // Relations fidélité
  loyalty_points        LoyaltyPoint[]
  promotion_usages      PromotionUsage[]
  loyalty_level_history LoyaltyLevelHistory[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model DishRestaurant {
  id            String     @id @default(uuid()) @db.Uuid
  dish_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  dish          Dish       @relation(fields: [dish_id], references: [id], onDelete: Cascade)
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
}

model DishSupplement {
  id            String     @id @default(uuid()) @db.Uuid
  dish_id       String     @db.Uuid
  supplement_id String     @db.Uuid
  dish          Dish       @relation(fields: [dish_id], references: [id], onDelete: Cascade)
  supplement    Supplement @relation(fields: [supplement_id], references: [id], onDelete: Cascade)
}

model Dish {
  id String @id @default(uuid()) @db.Uuid

  name             String           @db.VarChar
  description      String?          @db.VarChar
  price            Float
  image            String?          @db.Text
  is_promotion     Boolean          @default(false)
  promotion_price  Float?
  category_id      String           @db.Uuid
  category         Category         @relation(fields: [category_id], references: [id], onDelete: Cascade)
  dish_restaurants DishRestaurant[]
  dish_supplements DishSupplement[]
  favorites        Favorite[]
  order_items      OrderItem[]

  // Relations promotions
  promotion_dishes          PromotionDish[]
  promotion_targeted_dishes PromotionTargetedDish[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([category_id, entity_status, is_promotion])
}

model Favorite {
  id String @id @default(uuid()) @db.Uuid

  customer_id String   @db.Uuid
  dish_id     String   @db.Uuid
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  dish        Dish     @relation(fields: [dish_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model NotificationSetting {
  customer_id        String   @id @db.Uuid
  order_updates      Json
  promotions         Json
  newsletter         Json
  push_notifications Json
  customer           Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model Notification {
  id String @id @default(uuid()) @db.Uuid

  user_id       String           @db.VarChar
  icon          String           @db.Text
  icon_bg_color String           @db.VarChar
  title         String           @db.VarChar
  date          DateTime         @db.Date
  time          String           @db.VarChar
  message       String           @db.Text
  type          NotificationType
  is_read       Boolean          @default(false)
  show_chevron  Boolean?         @default(true)
  notif_banner  String           @db.VarChar
  notif_title   String           @db.VarChar
  data          Json?

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([user_id])
  @@index([type])
}

model OrderItem {
  id String @id @default(uuid()) @db.Uuid

  quantity    Int    @default(1)
  amount      Float
  order_id    String @db.Uuid
  dish_id     String @db.Uuid
  supplements Json?  @db.Json
  dish        Dish   @relation(fields: [dish_id], references: [id])
  order       Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model Order {
  id                      String      @id @default(uuid()) @db.Uuid
  reference               String      @unique @db.VarChar
  customer_id             String      @db.Uuid
  paied                   Boolean     @default(false)
  delivery_fee            Float
  type                    OrderType
  table_type              TypeTable?
  places                  Int?
  address                 Json        @db.Json // { title: string, address: string, street?: string, city?: string, longitude: number, latitude: number, note: string }
  code_promo              String?     @db.VarChar
  tax                     Float
  amount                  Float // Tous frais confondu
  net_amount              Float
  discount                Float       @default(0)
  date                    DateTime?   @db.Date
  time                    String?     @db.VarChar
  estimated_delivery_time DateTime?
  fullname                String?     @db.VarChar
  phone                   String?     @db.VarChar
  email                   String?     @db.VarChar
  note                    String?     @db.VarChar
  status                  OrderStatus
  restaurant_id           String      @db.Uuid
  order_items             OrderItem[]
  paiements               Paiement[]
  customer                Customer    @relation(fields: [customer_id], references: [id])
  restaurant              Restaurant  @relation(fields: [restaurant_id], references: [id])

  // ================================
  // INTÉGRATION PROMOTIONS ET FIDÉLITÉ
  // ================================
  promotion_id     String?          @db.Uuid
  promotion        Promotion?       @relation(fields: [promotion_id], references: [id])
  promotion_usages PromotionUsage[]
  loyalty_points   LoyaltyPoint[]

  entity_status EntityStatus @default(NEW)
  completed_at  DateTime?
  paied_at      DateTime?
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([reference, status, entity_status, customer_id])
}

model OtpToken {
  id      String   @id @default(uuid()) @db.Uuid
  code    String   @db.VarChar(255)
  phone   String   @db.VarChar
  counter Int?
  expire  DateTime @db.Timestamp(6)
}

model Paiement {
  id              String         @id @default(uuid()) @db.Uuid
  amount          Float          @default(0)
  total           Float          @default(0)
  mode            PaiementMode
  source          String?
  fees            Float          @default(0)
  client          Json?          @db.Json
  client_id       String?        @db.Uuid
  status          PaiementStatus
  reference       String         @db.VarChar
  failure_code    String?
  failure_message String?
  order_id        String?        @db.Uuid
  order           Order?         @relation(fields: [order_id], references: [id], onDelete: Cascade)

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model Restaurant {
  id String @id @default(uuid()) @db.Uuid

  name             String           @db.VarChar
  manager          String           @db.Uuid
  description      String?          @db.VarChar
  image            String?          @db.Text
  address          String?          @db.VarChar
  latitude         Float?
  longitude        Float?
  phone            String?          @db.VarChar
  email            String?          @db.VarChar
  schedule         Json?            @db.Json
  dish_restaurants DishRestaurant[]
  users            User[]
  orders           Order[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
}

model Supplement {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @db.VarChar
  price            Float
  image            String?            @db.Text
  available        Boolean            @default(true)
  category         SupplementCategory
  dish_supplements DishSupplement[]
}

model User {
  id String @id @default(uuid()) @db.Uuid

  fullname            String      @db.VarChar
  email               String      @unique @db.VarChar
  phone               String?     @db.VarChar
  password            String      @db.VarChar
  image               String?     @db.Text
  address             String?     @db.VarChar
  password_is_updated Boolean     @default(false)
  type                UserType
  role                UserRole
  restaurant_id       String?     @db.Uuid
  restaurant          Restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  // Relations promotions
  created_promotions Promotion[] @relation("CreatedBy")

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)

  @@index([email, type])
}

// ================================
// NOUVEAUX MODÈLES POUR LE SYSTÈME DE FIDÉLITÉ ET PROMOTIONS
// ================================

model Promotion {
  id             String       @id @default(uuid()) @db.Uuid
  title          String       @db.VarChar
  description    String?      @db.Text
  discount_type  DiscountType // PERCENTAGE, FIXED_AMOUNT, BUY_X_GET_Y
  discount_value Float
  target_type    TargetType // ALL_PRODUCTS, SPECIFIC_PRODUCTS, CATEGORIES

  // Contraintes
  min_order_amount    Float?
  max_discount_amount Float?
  max_usage_per_user  Int?   @default(1)
  max_total_usage     Int?
  current_usage       Int    @default(0)

  // Dates
  start_date      DateTime @db.Timestamp(6)
  expiration_date DateTime @db.Timestamp(6)

  // Statut et visibilité
  status     PromotionStatus @default(DRAFT)
  visibility Visibility      @default(PUBLIC)

  // Ciblage par niveau de fidélité (pour les promotions privées)
  target_standard Boolean @default(false)
  target_premium  Boolean @default(false)
  target_gold     Boolean @default(false)

  // Personnalisation visuelle
  coupon_image_url String? @db.Text
  background_color String? @db.VarChar // Code couleur hex
  text_color       String? @db.VarChar // Code couleur hex
  expiration_color String? @db.VarChar // Code couleur hex

  // Métadonnées
  created_by_id String @db.Uuid
  created_by    User   @relation("CreatedBy", fields: [created_by_id], references: [id])

  // Relations
  promotion_dishes          PromotionDish[]
  promotion_targeted_dishes PromotionTargetedDish[]
  promotion_usages          PromotionUsage[]
  orders                    Order[]

  created_at                    DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                    DateTime                    @default(now()) @db.Timestamp(6)
  promotion_targeted_categories PromotionTargetedCategory[]

  @@index([status, visibility])
  @@index([start_date, expiration_date])
}

// Table de liaison pour les plats inclus dans une promotion
model PromotionDish {
  id           String @id @default(uuid()) @db.Uuid
  promotion_id String @db.Uuid
  dish_id      String @db.Uuid
  quantity     Int    @default(1) // Pour les offres "Buy X Get Y"

  promotion Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  dish      Dish      @relation(fields: [dish_id], references: [id], onDelete: Cascade)

  @@unique([promotion_id, dish_id])
}

// Plats ciblés spécifiquement par une promotion
model PromotionTargetedDish {
  id           String @id @default(uuid()) @db.Uuid
  promotion_id String @db.Uuid
  dish_id      String @db.Uuid

  promotion Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  dish      Dish      @relation(fields: [dish_id], references: [id], onDelete: Cascade)

  @@unique([promotion_id, dish_id])
}

// Utilisation des promotions
model PromotionUsage {
  id           String  @id @default(uuid()) @db.Uuid
  promotion_id String  @db.Uuid
  customer_id  String  @db.Uuid
  order_id     String? @db.Uuid

  // Détails de l'utilisation
  discount_amount Float
  original_amount Float
  final_amount    Float

  promotion Promotion @relation(fields: [promotion_id], references: [id])
  customer  Customer  @relation(fields: [customer_id], references: [id])
  order     Order?    @relation(fields: [order_id], references: [id])

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([customer_id, promotion_id])
}

// Catégories ciblées spécifiquement par une promotion
model PromotionTargetedCategory {
  id           String @id @default(uuid()) @db.Uuid
  promotion_id String @db.Uuid
  category_id  String @db.Uuid

  promotion Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([promotion_id, category_id])
}

// Système de points de fidélité
model LoyaltyPoint {
  id          String             @id @default(uuid()) @db.Uuid
  customer_id String             @db.Uuid
  is_used     LoyaltyPointIsUsed @default(NO)
  points_used Float              @default(0)
  points      Int
  type        LoyaltyPointType
  reason      String?            @db.Text // Description de la raison (commande, bonus, etc.)
  order_id    String?            @db.Uuid
  expires_at  DateTime?          @db.Timestamp(6)

  customer Customer @relation(fields: [customer_id], references: [id])
  order    Order?   @relation(fields: [order_id], references: [id])

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([customer_id, type])
  @@index([expires_at])
}

// Historique des changements de niveau de fidélité
model LoyaltyLevelHistory {
  id             String        @id @default(uuid()) @db.Uuid
  customer_id    String        @db.Uuid
  previous_level LoyaltyLevel?
  new_level      LoyaltyLevel
  points_at_time Int // Points au moment du changement
  reason         String?       @db.Text // Raison du changement (achat, bonus, etc.)

  customer Customer @relation(fields: [customer_id], references: [id])

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([customer_id])
}

// Configuration du système de fidélité
model LoyaltyConfig {
  id                        String @id @default(uuid()) @db.Uuid
  points_per_xof            Float  @default(0.002) // 2 points par 1000 XOF dépensé
  points_expiration_days    Int?   @default(365) // Points expirent après X jours
  minimum_redemption_points Int    @default(100) // Pour 100 points, on peut acheter un plat de 2000 XOF
  point_value_in_xof        Float  @default(20) // 1 point = 20 XOF

  // Seuils pour les niveaux de fidélité
  standard_threshold Int @default(300) // 300 points pour Standard
  premium_threshold  Int @default(700) // 700 points pour Premium
  gold_threshold     Int @default(1000) // 1000 points pour Gold

  is_active  Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}
