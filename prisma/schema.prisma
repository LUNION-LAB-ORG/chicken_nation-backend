generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  BACKOFFICE
  RESTAURANT
}

enum UserRole {
  ADMIN
  MANAGER
}

enum CategorySupplement {
  FOOD
  DRINK
  ACCESSORY
}

enum EntityStatus {
  NEW
  VALIDATED
  INVALIDATED
  UNAVAILABLE
  AVAILABLE
  BLOCKED
  DELETED
}

enum OrderType {
  DELIVERY
  PICKUP
  TABLE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentType {
  CASH
  CREDIT_CARD
  MOBILE_MONEY
  PAYPAL
  STRIPE
}

enum MobileMoneyType {
  ORANGE_MONEY
  MOOV_MONEY
  MTN_MONEY
  WAVE
}

model User {
  id            String       @id @default(uuid())
  fullname      String
  email         String       @unique
  phone         String?
  password      String
  image         String?
  address       String?
  type          UserType
  role          UserRole
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId  String?
  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@index([email, type])
  @@map("users")
}

model Restaurant {
  id              String           @id @default(uuid())
  name            String
  manager         String           @default(uuid())
  description     String?
  image           String?
  address         String?
  latitude        Float?
  longitude       Float?
  phone           String?
  email           String?
  schedule        Json?            @db.Json // Array of day and start_time, end_time
  users           User[]
  dishRestaurants DishRestaurant[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@map("restaurants")
}

model DishRestaurant {
  id           String     @id @default(uuid())
  dishId       String
  restaurantId String
  dish         Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("dish_restaurants")
}

model Address {
  id         String    @id @default(uuid())
  title      String
  address    String
  street     String?
  city       String?
  longitude  Float
  latitude   Float
  orders     Order[]
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("addresses")
}

model Customer {
  id        String     @id @default(uuid())
  phone     String     @unique
  firstname String?
  lastname  String?
  image     String?
  addresses Address[]
  favorites Favorite[]
  otpTokens OtpToken[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@map("customers")
}

model OtpToken {
  id         String    @id @default(uuid())
  code       String    @db.VarChar(255)
  telephone  String?
  counter    Int?
  expire     DateTime
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("otp_tokens")
}

model CounterOtp {
  id      String @id @default(uuid())
  counter Int

  @@map("counter_otp")
}

model Favorite {
  id         String   @id @default(uuid())
  customerId String
  dishId     String
  created_at DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dish     Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("favorites")
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?
  image       String?
  dishes      Dish[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@map("categories")
}

model Dish {
  id                 String             @id @default(uuid())
  name               String
  description        String?
  price              Float
  image              String?
  available          Boolean            @default(true)
  isNew              Boolean            @default(false)
  categoryId         String
  category           Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplements        DishSupplement[]
  favorites          Favorite[]
  dishRestaurants    DishRestaurant[]
  orderItems         OrderItem[]
  specialOfferDishes SpecialOfferDish[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@index([categoryId, available])
  @@map("dishes")
}

model DishSupplement {
  id           String     @id @default(uuid())
  dishId       String
  supplementId String
  dish         Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplement   Supplement @relation(fields: [supplementId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("dish_supplements")
}

model Supplement {
  id              String             @id @default(uuid())
  name            String
  price           Float
  image           String?
  available       Boolean            @default(true)
  category        CategorySupplement
  dishSupplements DishSupplement[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@map("supplements")
}

model Order {
  id          String      @id @default(uuid())
  type        OrderType
  addressId   String
  address     Address     @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems  OrderItem[]
  codePromo   String?
  deliveryFee Float
  tax         Float
  amount      Float
  netAmount   Float
  date        DateTime?   @db.Date
  time        DateTime?   @db.Time
  fullname    String?
  phone       String?
  email       String?
  note        String?
  payments    Paiement[]

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@index([addressId])
  @@map("orders")
}

model OrderItem {
  id          String @id @default(uuid())
  quantity    Int    @default(1)
  amount      Float
  orderId     String
  order       Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dishId      String
  dish        Dish   @relation(fields: [dishId], references: [id])
  supplements Json?  @db.Json // Array of dish supplement ids and price

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@map("order_items")
}

model Paiement {
  id              String           @id @default(uuid())
  amount          Float
  orderId         String
  order           Order            @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mode            PaymentType
  mobileMoneyType MobileMoneyType?
  status          PaymentStatus
  reference       String

  entity_status EntityStatus @default(NEW)
  created_at    DateTime     @default(now())
  updated_at    DateTime?    @updatedAt

  @@map("paiements")
}

model SpecialOffer {
  id                 String             @id @default(uuid())
  name               String
  description        String?
  image              String
  tax                Float
  startDate          DateTime
  endDate            DateTime
  specialOfferDishes SpecialOfferDish[]

  @@map("special_offers")
}

model SpecialOfferDish {
  id             String       @id @default(uuid())
  dishId         String
  specialOfferId String
  dish           Dish         @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialOffer   SpecialOffer @relation(fields: [specialOfferId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("special_offer_dishes")
}
