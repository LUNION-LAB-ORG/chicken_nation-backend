import { Injectable, Logger } from '@nestjs/common';
import { WebhookResponseDto } from '../dto/turbo-webhook.dto';
import { WebhookEvent } from '../enums/webhook-event.enum';

@Injectable()
export class TurboWebhookService {
  private readonly logger = new Logger(TurboWebhookService.name);

  // Lorsqu'une course est cr√©√©e
  async handleDeliveryCreated(data: any): Promise<WebhookResponseDto> {
    this.logger.log(`‚úÖ Livraison cr√©√©e: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_CREATED,
      received: true,
      process: true,
    };
  }

  // Lorsqu'un livreur est affect√©
  async handleCourierAssigned(data: any): Promise<WebhookResponseDto> {
    this.logger.log(`üë∑ Coursier assign√©: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_COURIER_ASSIGNED,
      received: true,
      process: true,
    };
    // üëâ Ex: mise √† jour en DB avec courier_id
  }

  // Lorsqu'une course est prise en charge
  async handlePickupStarted(data: any): Promise<WebhookResponseDto> {
    this.logger.log(`üöó Pickup d√©marr√©: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_PICKUP_STARTED,
      received: true,
      process: true,
    };
  }

  // Lorsqu'une course est r√©cup√©r√©e
  async handlePickedUp(data: any): Promise<WebhookResponseDto> {
    this.logger.log(`üì¶ Commande r√©cup√©r√©e: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_PICKED_UP,
      received: true,
      process: true,
    };
  }

  // Lorsqu'une course est en cours de livraison
  async handleInTransit(data: any): Promise<WebhookResponseDto> {
    this.logger.log(`üõµ En transit: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_IN_TRANSIT,
      received: true,
      process: true,
    };
  }

  // Lorsqu'une course est livr√©e
  async handleDelivered(data: any): Promise<WebhookResponseDto> {
    this.logger.log(`üéâ Livraison termin√©e: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_DELIVERED,
      received: true,
      process: true,
    };
  }

  // Lorsqu'une course est annul√©e
  async handleCancelled(data: any): Promise<WebhookResponseDto> {
    this.logger.warn(`‚ùå Livraison annul√©e: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_CANCELLED,
      received: true,
      process: true,
    };
  }

  // Lorsqu'une course est annul√©e
  async handleLocationUpdated(data: any): Promise<WebhookResponseDto> {
    this.logger.debug(`üìç Position mise √† jour: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.COURIER_LOCATION_UPDATED,
      received: true,
      process: true,
    };
  }

  // Lorsqu'une course est annul√©e
  async handleEmergency(data: any): Promise<WebhookResponseDto> {
    this.logger.error(`üö® Urgence d√©tect√©e: ${JSON.stringify(data)}`);
    return {
      event: WebhookEvent.DELIVERY_EMERGENCY,
      received: true,
      process: true,
    };
  }
}
